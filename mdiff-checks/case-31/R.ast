(Module
 (:
  (FromImport
   (ImportRelative 0 (Just (: (Ident "nbconvert" ()) [])) ())
   (FromItems
    (:
     (FromItem (Ident "ConverterRST" ()) Nothing ())
     (:
      (FromItem (Ident "main" ()) Nothing ())
      (: (FromItem (Ident "converters" ()) Nothing ()) [])))
    ())
   ())
  (:
   (Import
    (:
     (ImportItem
      (: (Ident "nose" ()) (: (Ident "tools" ()) []))
      (Just (Ident "nt" ()))
      ())
     [])
    ())
   (:
    (Import (: (ImportItem (: (Ident "os" ()) []) Nothing ()) []) ())
    (:
     (Import (: (ImportItem (: (Ident "glob" ()) []) Nothing ()) []) ())
     (:
      (Import (: (ImportItem (: (Ident "tempfile" ()) []) Nothing ()) []) ())
      (:
       (Import (: (ImportItem (: (Ident "shutil" ()) []) Nothing ()) []) ())
       (:
        (FromImport
         (ImportRelative
          0
          (Just (: (Ident "IPython" ()) (: (Ident "nbformat" ()) [])))
          ())
         (FromItems
          (: (FromItem (Ident "current" ()) (Just (Ident "nbformat" ())) ()) [])
          ())
         ())
        (:
         (Class
          (Ident "TestSimple" ())
          (: (ArgExpr (Var (Ident "object" ()) ()) ()) [])
          (:
           (Fun
            (Ident "setUp" ())
            (: (Param (Ident "self" ()) Nothing Nothing ()) [])
            Nothing
            (:
             (StmtExpr
              (Strings
               (:
                "\"\"\"\n        Create a new temporary directory and copy the input file\n        'test.ipynb' there.\n        \"\"\""
                [])
               ())
              ())
             (:
              (Assign
               (: (Dot (Var (Ident "self" ()) ()) (Ident "fname" ()) ()) [])
               (Strings (: "'test.ipynb'" []) ())
               ())
              (:
               (Assign
                (: (Dot (Var (Ident "self" ()) ()) (Ident "basename" ()) ()) [])
                (Subscript
                 (Call
                  (Dot
                   (Dot (Var (Ident "os" ()) ()) (Ident "path" ()) ())
                   (Ident "splitext" ())
                   ())
                  (:
                   (ArgExpr
                    (Dot (Var (Ident "self" ()) ()) (Ident "fname" ()) ())
                    ())
                   [])
                  ())
                 (Int 0 "0" ())
                 ())
                ())
               (:
                (Assign
                 (: (Dot (Var (Ident "self" ()) ()) (Ident "wrkdir" ()) ()) [])
                 (Call
                  (Dot (Var (Ident "tempfile" ()) ()) (Ident "mkdtemp" ()) ())
                  []
                  ())
                 ())
                (:
                 (Assign
                  (: (Dot (Var (Ident "self" ()) ()) (Ident "infile" ()) ()) [])
                  (Call
                   (Dot
                    (Dot (Var (Ident "os" ()) ()) (Ident "path" ()) ())
                    (Ident "join" ())
                    ())
                   (:
                    (ArgExpr
                     (Dot (Var (Ident "self" ()) ()) (Ident "wrkdir" ()) ())
                     ())
                    (:
                     (ArgExpr
                      (Dot (Var (Ident "self" ()) ()) (Ident "fname" ()) ())
                      ())
                     []))
                   ())
                  ())
                 (:
                  (StmtExpr
                   (Call
                    (Dot (Var (Ident "shutil" ()) ()) (Ident "copy" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Dot
                        (Dot (Var (Ident "os" ()) ()) (Ident "path" ()) ())
                        (Ident "join" ())
                        ())
                       (:
                        (ArgExpr (Strings (: "'tests'" []) ()) ())
                        (:
                         (ArgExpr
                          (Dot (Var (Ident "self" ()) ()) (Ident "fname" ()) ())
                          ())
                         []))
                       ())
                      ())
                     (:
                      (ArgExpr
                       (Dot (Var (Ident "self" ()) ()) (Ident "infile" ()) ())
                       ())
                      []))
                    ())
                   ())
                  []))))))
            ())
           (:
            (Fun
             (Ident "tearDown" ())
             (: (Param (Ident "self" ()) Nothing Nothing ()) [])
             Nothing
             (:
              (StmtExpr
               (Call
                (Dot (Var (Ident "shutil" ()) ()) (Ident "rmtree" ()) ())
                (:
                 (ArgExpr
                  (Dot (Var (Ident "self" ()) ()) (Ident "wrkdir" ()) ())
                  ())
                 [])
                ())
               ())
              [])
             ())
            (:
             (Fun
              (Ident "outfile_exists" ())
              (:
               (Param (Ident "self" ()) Nothing Nothing ())
               (: (Param (Ident "fmt" ()) Nothing Nothing ()) []))
              Nothing
              (:
               (Assign
                (: (Var (Ident "extension" ()) ()) [])
                (Dot
                 (Subscript
                  (Var (Ident "converters" ()) ())
                  (Var (Ident "fmt" ()) ())
                  ())
                 (Ident "extension" ())
                 ())
                ())
               (:
                (Return
                 (Just
                  (Call
                   (Dot
                    (Dot (Var (Ident "os" ()) ()) (Ident "path" ()) ())
                    (Ident "exists" ())
                    ())
                   (:
                    (ArgExpr
                     (Call
                      (Dot
                       (Dot (Var (Ident "os" ()) ()) (Ident "path" ()) ())
                       (Ident "join" ())
                       ())
                      (:
                       (ArgExpr
                        (Dot (Var (Ident "self" ()) ()) (Ident "wrkdir" ()) ())
                        ())
                       (:
                        (ArgExpr
                         (BinaryOp
                          (Plus ())
                          (BinaryOp
                           (Plus ())
                           (Dot
                            (Var (Ident "self" ()) ())
                            (Ident "basename" ())
                            ())
                           (Strings (: "'.'" []) ())
                           ())
                          (Var (Ident "extension" ()) ())
                          ())
                         ())
                        []))
                      ())
                     ())
                    [])
                   ()))
                 ())
                []))
              ())
             (:
              (Fun
               (Ident "test_simple" ())
               (: (Param (Ident "self" ()) Nothing Nothing ()) [])
               Nothing
               (:
                (Assign
                 (: (Var (Ident "c" ()) ()) [])
                 (Call
                  (Var (Ident "ConverterRST" ()) ())
                  (:
                   (ArgExpr
                    (Dot (Var (Ident "self" ()) ()) (Ident "infile" ()) ())
                    ())
                   [])
                  ())
                 ())
                (:
                 (Assign
                  (: (Var (Ident "f" ()) ()) [])
                  (Call
                   (Dot (Var (Ident "c" ()) ()) (Ident "render" ()) ())
                   []
                   ())
                  ())
                 (:
                  (StmtExpr
                   (Call
                    (Dot (Var (Ident "nt" ()) ()) (Ident "assert_true" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Dot (Var (Ident "f" ()) ()) (Ident "endswith" ()) ())
                       (: (ArgExpr (Strings (: "'.rst'" []) ()) ()) [])
                       ())
                      ())
                     (:
                      (ArgExpr
                       (Strings (: "'changed file extension to rst'" []) ())
                       ())
                      []))
                    ())
                   ())
                  [])))
               ())
              (:
               (Fun
                (Ident "run_main" ())
                (:
                 (Param (Ident "self" ()) Nothing Nothing ())
                 (: (Param (Ident "fmt" ()) Nothing Nothing ()) []))
                Nothing
                (:
                 (StmtExpr
                  (Strings
                   (:
                    "\"\"\"\n        Run the 'main' method to convert the input file to the given\n        format and check that the expected output file exists.\n        \"\"\""
                    [])
                   ())
                  ())
                 (:
                  (StmtExpr
                   (Call
                    (Var (Ident "main" ()) ())
                    (:
                     (ArgExpr
                      (Dot (Var (Ident "self" ()) ()) (Ident "infile" ()) ())
                      ())
                     (:
                      (ArgKeyword
                       (Ident "format" ())
                       (Var (Ident "fmt" ()) ())
                       ())
                      []))
                    ())
                   ())
                  (:
                   (StmtExpr
                    (Call
                     (Dot (Var (Ident "nt" ()) ()) (Ident "assert_true" ()) ())
                     (:
                      (ArgExpr
                       (Call
                        (Dot
                         (Var (Ident "self" ()) ())
                         (Ident "outfile_exists" ())
                         ())
                        (: (ArgExpr (Var (Ident "fmt" ()) ()) ()) [])
                        ())
                       ())
                      [])
                     ())
                    ())
                   [])))
                ())
               (:
                (Fun
                 (Ident "test_main" ())
                 (: (Param (Ident "self" ()) Nothing Nothing ()) [])
                 Nothing
                 (:
                  (StmtExpr
                   (Strings
                    (:
                     "\"\"\"\n        Test main entry point with all known formats.\n        \"\"\""
                     [])
                    ())
                   ())
                  (:
                   (For
                    (: (Var (Ident "fmt" ()) ()) [])
                    (Var (Ident "converters" ()) ())
                    (:
                     (StmtExpr
                      (Yield
                       (Just
                        (YieldExpr
                         (Tuple
                          (:
                           (Dot
                            (Var (Ident "self" ()) ())
                            (Ident "run_main" ())
                            ())
                           (: (Var (Ident "fmt" ()) ()) []))
                          ())))
                       ())
                      ())
                     [])
                    []
                    ())
                   []))
                 ())
                (:
                 (Fun
                  (Ident "test_render_heading" ())
                  (: (Param (Ident "self" ()) Nothing Nothing ()) [])
                  Nothing
                  (:
                   (StmtExpr
                    (Strings
                     (:
                      "\"\"\"\n        Unit test for cell type \"heading\"\n        \"\"\""
                      [])
                     ())
                    ())
                   (:
                    (For
                     (: (Var (Ident "level" ()) ()) [])
                     (Call
                      (Var (Ident "xrange" ()) ())
                      (:
                       (ArgExpr (Int 1 "1" ()) ())
                       (: (ArgExpr (Int 7 "7" ()) ()) []))
                      ())
                     (:
                      (Assign
                       (: (Var (Ident "cell" ()) ()) [])
                       (Dictionary
                        (:
                         (DictMappingPair
                          (Strings (: "'cell_type'" []) ())
                          (Strings (: "'heading'" []) ()))
                         (:
                          (DictMappingPair
                           (Strings (: "'level'" []) ())
                           (Var (Ident "level" ()) ()))
                          (:
                           (DictMappingPair
                            (Strings (: "'source'" []) ())
                            (List
                             (:
                              (Call
                               (Dot
                                (Strings
                                 (: "'Test for heading type H{0}'" [])
                                 ())
                                (Ident "format" ())
                                ())
                               (: (ArgExpr (Var (Ident "level" ()) ()) ()) [])
                               ())
                              [])
                             ()))
                           [])))
                        ())
                       ())
                      (:
                       (Assign
                        (: (Var (Ident "cell_nb" ()) ()) [])
                        (Call
                         (Dot
                          (Var (Ident "nbformat" ()) ())
                          (Ident "NotebookNode" ())
                          ())
                         (: (ArgExpr (Var (Ident "cell" ()) ()) ()) [])
                         ())
                        ())
                       (:
                        (Conditional
                         (:
                          ((,)
                           (BinaryOp
                            (Is ())
                            (Call
                             (Var (Ident "type" ()) ())
                             (:
                              (ArgExpr
                               (Dot
                                (Var (Ident "cell_nb" ()) ())
                                (Ident "source" ())
                                ())
                               ())
                              [])
                             ())
                            (Var (Ident "list" ()) ())
                            ())
                           (:
                            (Assign
                             (:
                              (Dot
                               (Var (Ident "cell_nb" ()) ())
                               (Ident "source" ())
                               ())
                              [])
                             (Call
                              (Dot
                               (Strings (: "'\\n'" []) ())
                               (Ident "join" ())
                               ())
                              (:
                               (ArgExpr
                                (Dot
                                 (Var (Ident "cell_nb" ()) ())
                                 (Ident "source" ())
                                 ())
                                ())
                               [])
                              ())
                             ())
                            []))
                          [])
                         []
                         ())
                        (:
                         (Assign
                          (: (Var (Ident "c" ()) ()) [])
                          (Call
                           (Var (Ident "ConverterRST" ()) ())
                           (: (ArgExpr (Strings (: "''" []) ()) ()) [])
                           ())
                          ())
                         (:
                          (Assign
                           (: (Var (Ident "rst_list" ()) ()) [])
                           (Call
                            (Dot
                             (Var (Ident "c" ()) ())
                             (Ident "render_heading" ())
                             ())
                            (: (ArgExpr (Var (Ident "cell_nb" ()) ()) ()) [])
                            ())
                           ())
                          (:
                           (StmtExpr
                            (Call
                             (Dot
                              (Var (Ident "nt" ()) ())
                              (Ident "assert_true" ())
                              ())
                             (:
                              (ArgExpr
                               (Call
                                (Var (Ident "isinstance" ()) ())
                                (:
                                 (ArgExpr (Var (Ident "rst_list" ()) ()) ())
                                 (: (ArgExpr (Var (Ident "list" ()) ()) ()) []))
                                ())
                               ())
                              [])
                             ())
                            ())
                           (:
                            (Assign
                             (: (Var (Ident "rst_str" ()) ()) [])
                             (Call
                              (Dot
                               (Strings (: "\"\"" []) ())
                               (Ident "join" ())
                               ())
                              (: (ArgExpr (Var (Ident "rst_list" ()) ()) ()) [])
                              ())
                             ())
                            (:
                             (Assign
                              (: (Var (Ident "chk_str" ()) ()) [])
                              (Call
                               (Dot
                                (Strings
                                 (:
                                  "\"Test for heading type H{0}\\n{1}\\n\""
                                  [])
                                 ())
                                (Ident "format" ())
                                ())
                               (:
                                (ArgExpr (Var (Ident "level" ()) ()) ())
                                (:
                                 (ArgExpr
                                  (BinaryOp
                                   (Multiply ())
                                   (Subscript
                                    (Dot
                                     (Var (Ident "c" ()) ())
                                     (Ident "heading_level" ())
                                     ())
                                    (Var (Ident "level" ()) ())
                                    ())
                                   (Int 24 "24" ())
                                   ())
                                  ())
                                 []))
                               ())
                              ())
                             (:
                              (StmtExpr
                               (Call
                                (Dot
                                 (Var (Ident "nt" ()) ())
                                 (Ident "assert_equal" ())
                                 ())
                                (:
                                 (ArgExpr (Var (Ident "rst_str" ()) ()) ())
                                 (:
                                  (ArgExpr (Var (Ident "chk_str" ()) ()) ())
                                  []))
                                ())
                               ())
                              [])))))))))
                     []
                     ())
                    []))
                  ())
                 [])))))))
          ())
         [])))))))))
