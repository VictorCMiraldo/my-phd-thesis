(Module
 (:
  (FromImport
   (ImportRelative 0 (Just (: (Ident "sympy" ()) [])) ())
   (FromItems
    (:
     (FromItem (Ident "symbols" ()) Nothing ())
     (:
      (FromItem (Ident "Basic" ()) Nothing ())
      (:
       (FromItem (Ident "Integral" ()) Nothing ())
       (: (FromItem (Ident "raises" ()) Nothing ()) []))))
    ())
   ())
  (:
   (FromImport
    (ImportRelative
     0
     (Just
      (:
       (Ident "sympy" ())
       (: (Ident "utilities" ()) (: (Ident "iterables" ()) []))))
     ())
    (FromItems
     (:
      (FromItem (Ident "postorder_traversal" ()) Nothing ())
      (:
       (FromItem (Ident "preorder_traversal" ()) Nothing ())
       (:
        (FromItem (Ident "flatten" ()) Nothing ())
        (:
         (FromItem (Ident "group" ()) Nothing ())
         (:
          (FromItem (Ident "split" ()) Nothing ())
          (:
           (FromItem (Ident "subsets" ()) Nothing ())
           (:
            (FromItem (Ident "variations" ()) Nothing ())
            (:
             (FromItem (Ident "numbered_symbols" ()) Nothing ())
             (:
              (FromItem (Ident "take" ()) Nothing ())
              (:
               (FromItem (Ident "dict_merge" ()) Nothing ())
               (: (FromItem (Ident "cartes" ()) Nothing ()) [])))))))))))
     ())
    ())
   (:
    (FromImport
     (ImportRelative
      0
      (Just
       (:
        (Ident "sympy" ())
        (:
         (Ident "functions" ())
         (: (Ident "elementary" ()) (: (Ident "piecewise" ()) [])))))
      ())
     (FromItems
      (:
       (FromItem (Ident "Piecewise" ()) Nothing ())
       (: (FromItem (Ident "ExprCondPair" ()) Nothing ()) []))
      ())
     ())
    (:
     (Assign
      (:
       (Tuple
        (:
         (Var (Ident "w" ()) ())
         (:
          (Var (Ident "x" ()) ())
          (: (Var (Ident "y" ()) ()) (: (Var (Ident "z" ()) ()) []))))
        ())
       [])
      (Call
       (Var (Ident "symbols" ()) ())
       (: (ArgExpr (Strings (: "'w,x,y,z'" []) ()) ()) [])
       ())
      ())
     (:
      (Fun
       (Ident "test_postorder_traversal" ())
       []
       Nothing
       (:
        (Assign
         (: (Var (Ident "expr" ()) ()) [])
         (BinaryOp
          (Plus ())
          (Var (Ident "z" ()) ())
          (BinaryOp
           (Multiply ())
           (Var (Ident "w" ()) ())
           (Paren
            (BinaryOp
             (Plus ())
             (Var (Ident "x" ()) ())
             (Var (Ident "y" ()) ())
             ())
            ())
           ())
          ())
         ())
        (:
         (Assign
          (: (Var (Ident "expected1" ()) ()) [])
          (List
           (:
            (Var (Ident "z" ()) ())
            (:
             (Var (Ident "w" ()) ())
             (:
              (Var (Ident "y" ()) ())
              (:
               (Var (Ident "x" ()) ())
               (:
                (BinaryOp
                 (Plus ())
                 (Var (Ident "x" ()) ())
                 (Var (Ident "y" ()) ())
                 ())
                (:
                 (BinaryOp
                  (Multiply ())
                  (Var (Ident "w" ()) ())
                  (Paren
                   (BinaryOp
                    (Plus ())
                    (Var (Ident "x" ()) ())
                    (Var (Ident "y" ()) ())
                    ())
                   ())
                  ())
                 (:
                  (BinaryOp
                   (Plus ())
                   (Var (Ident "z" ()) ())
                   (BinaryOp
                    (Multiply ())
                    (Var (Ident "w" ()) ())
                    (Paren
                     (BinaryOp
                      (Plus ())
                      (Var (Ident "x" ()) ())
                      (Var (Ident "y" ()) ())
                      ())
                     ())
                    ())
                   ())
                  [])))))))
           ())
          ())
         (:
          (Assign
           (: (Var (Ident "expected2" ()) ()) [])
           (List
            (:
             (Var (Ident "z" ()) ())
             (:
              (Var (Ident "w" ()) ())
              (:
               (Var (Ident "x" ()) ())
               (:
                (Var (Ident "y" ()) ())
                (:
                 (BinaryOp
                  (Plus ())
                  (Var (Ident "x" ()) ())
                  (Var (Ident "y" ()) ())
                  ())
                 (:
                  (BinaryOp
                   (Multiply ())
                   (Var (Ident "w" ()) ())
                   (Paren
                    (BinaryOp
                     (Plus ())
                     (Var (Ident "x" ()) ())
                     (Var (Ident "y" ()) ())
                     ())
                    ())
                   ())
                  (:
                   (BinaryOp
                    (Plus ())
                    (Var (Ident "z" ()) ())
                    (BinaryOp
                     (Multiply ())
                     (Var (Ident "w" ()) ())
                     (Paren
                      (BinaryOp
                       (Plus ())
                       (Var (Ident "x" ()) ())
                       (Var (Ident "y" ()) ())
                       ())
                      ())
                     ())
                    ())
                   [])))))))
            ())
           ())
          (:
           (Assign
            (: (Var (Ident "expected3" ()) ()) [])
            (List
             (:
              (Var (Ident "w" ()) ())
              (:
               (Var (Ident "y" ()) ())
               (:
                (Var (Ident "x" ()) ())
                (:
                 (BinaryOp
                  (Plus ())
                  (Var (Ident "x" ()) ())
                  (Var (Ident "y" ()) ())
                  ())
                 (:
                  (BinaryOp
                   (Multiply ())
                   (Var (Ident "w" ()) ())
                   (Paren
                    (BinaryOp
                     (Plus ())
                     (Var (Ident "x" ()) ())
                     (Var (Ident "y" ()) ())
                     ())
                    ())
                   ())
                  (:
                   (Var (Ident "z" ()) ())
                   (:
                    (BinaryOp
                     (Plus ())
                     (Var (Ident "z" ()) ())
                     (BinaryOp
                      (Multiply ())
                      (Var (Ident "w" ()) ())
                      (Paren
                       (BinaryOp
                        (Plus ())
                        (Var (Ident "x" ()) ())
                        (Var (Ident "y" ()) ())
                        ())
                       ())
                      ())
                     ())
                    [])))))))
             ())
            ())
           (:
            (Assert
             (:
              (BinaryOp
               (In ())
               (Call
                (Var (Ident "list" ()) ())
                (:
                 (ArgExpr
                  (Call
                   (Var (Ident "postorder_traversal" ()) ())
                   (: (ArgExpr (Var (Ident "expr" ()) ()) ()) [])
                   ())
                  ())
                 [])
                ())
               (List
                (:
                 (Var (Ident "expected1" ()) ())
                 (:
                  (Var (Ident "expected2" ()) ())
                  (: (Var (Ident "expected3" ()) ()) [])))
                ())
               ())
              [])
             ())
            (:
             (Assign
              (: (Var (Ident "expr" ()) ()) [])
              (Call
               (Var (Ident "Piecewise" ()) ())
               (:
                (ArgExpr
                 (Paren
                  (Tuple
                   (:
                    (Var (Ident "x" ()) ())
                    (:
                     (BinaryOp
                      (LessThan ())
                      (Var (Ident "x" ()) ())
                      (Int 1 "1" ())
                      ())
                     []))
                   ())
                  ())
                 ())
                (:
                 (ArgExpr
                  (Paren
                   (Tuple
                    (:
                     (BinaryOp
                      (Exponent ())
                      (Var (Ident "x" ()) ())
                      (Int 2 "2" ())
                      ())
                     (: (Bool True ()) []))
                    ())
                   ())
                  ())
                 []))
               ())
              ())
             (:
              (Assert
               (:
                (BinaryOp
                 (Equality ())
                 (Call
                  (Var (Ident "list" ()) ())
                  (:
                   (ArgExpr
                    (Call
                     (Var (Ident "postorder_traversal" ()) ())
                     (: (ArgExpr (Var (Ident "expr" ()) ()) ()) [])
                     ())
                    ())
                   [])
                  ())
                 (List
                  (:
                   (Var (Ident "x" ()) ())
                   (:
                    (Var (Ident "x" ()) ())
                    (:
                     (Int 1 "1" ())
                     (:
                      (BinaryOp
                       (LessThan ())
                       (Var (Ident "x" ()) ())
                       (Int 1 "1" ())
                       ())
                      (:
                       (Call
                        (Var (Ident "ExprCondPair" ()) ())
                        (:
                         (ArgExpr (Var (Ident "x" ()) ()) ())
                         (:
                          (ArgExpr
                           (BinaryOp
                            (LessThan ())
                            (Var (Ident "x" ()) ())
                            (Int 1 "1" ())
                            ())
                           ())
                          []))
                        ())
                       (:
                        (Var (Ident "x" ()) ())
                        (:
                         (Int 2 "2" ())
                         (:
                          (BinaryOp
                           (Exponent ())
                           (Var (Ident "x" ()) ())
                           (Int 2 "2" ())
                           ())
                          (:
                           (Bool True ())
                           (:
                            (Call
                             (Var (Ident "ExprCondPair" ()) ())
                             (:
                              (ArgExpr
                               (BinaryOp
                                (Exponent ())
                                (Var (Ident "x" ()) ())
                                (Int 2 "2" ())
                                ())
                               ())
                              (: (ArgExpr (Bool True ()) ()) []))
                             ())
                            (:
                             (Call
                              (Var (Ident "Piecewise" ()) ())
                              (:
                               (ArgExpr
                                (Paren
                                 (Tuple
                                  (:
                                   (Var (Ident "x" ()) ())
                                   (:
                                    (BinaryOp
                                     (LessThan ())
                                     (Var (Ident "x" ()) ())
                                     (Int 1 "1" ())
                                     ())
                                    []))
                                  ())
                                 ())
                                ())
                               (:
                                (ArgExpr
                                 (Paren
                                  (Tuple
                                   (:
                                    (BinaryOp
                                     (Exponent ())
                                     (Var (Ident "x" ()) ())
                                     (Int 2 "2" ())
                                     ())
                                    (: (Bool True ()) []))
                                   ())
                                  ())
                                 ())
                                []))
                              ())
                             [])))))))))))
                  ())
                 ())
                [])
               ())
              (:
               (Assert
                (:
                 (BinaryOp
                  (Equality ())
                  (Call
                   (Var (Ident "list" ()) ())
                   (:
                    (ArgExpr
                     (Call
                      (Var (Ident "preorder_traversal" ()) ())
                      (:
                       (ArgExpr
                        (Call
                         (Var (Ident "Integral" ()) ())
                         (:
                          (ArgExpr
                           (BinaryOp
                            (Exponent ())
                            (Var (Ident "x" ()) ())
                            (Int 2 "2" ())
                            ())
                           ())
                          (:
                           (ArgExpr
                            (Paren
                             (Tuple
                              (:
                               (Var (Ident "x" ()) ())
                               (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                              ())
                             ())
                            ())
                           []))
                         ())
                        ())
                       [])
                      ())
                     ())
                    [])
                   ())
                  (List
                   (:
                    (Call
                     (Var (Ident "Integral" ()) ())
                     (:
                      (ArgExpr
                       (BinaryOp
                        (Exponent ())
                        (Var (Ident "x" ()) ())
                        (Int 2 "2" ())
                        ())
                       ())
                      (:
                       (ArgExpr
                        (Paren
                         (Tuple
                          (:
                           (Var (Ident "x" ()) ())
                           (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                          ())
                         ())
                        ())
                       []))
                     ())
                    (:
                     (BinaryOp
                      (Exponent ())
                      (Var (Ident "x" ()) ())
                      (Int 2 "2" ())
                      ())
                     (:
                      (Var (Ident "x" ()) ())
                      (:
                       (Int 2 "2" ())
                       (:
                        (Paren
                         (Tuple
                          (:
                           (Paren
                            (Tuple
                             (:
                              (Var (Ident "x" ()) ())
                              (:
                               (Paren
                                (Tuple
                                 (: (Int 0 "0" ()) (: (Int 1 "1" ()) []))
                                 ())
                                ())
                               []))
                             ())
                            ())
                           [])
                          ())
                         ())
                        (:
                         (Paren
                          (Tuple
                           (:
                            (Var (Ident "x" ()) ())
                            (:
                             (Paren
                              (Tuple
                               (: (Int 0 "0" ()) (: (Int 1 "1" ()) []))
                               ())
                              ())
                             []))
                           ())
                          ())
                         (:
                          (Var (Ident "x" ()) ())
                          (:
                           (Paren
                            (Tuple (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])) ())
                            ())
                           (: (Int 0 "0" ()) (: (Int 1 "1" ()) []))))))))))
                   ())
                  ())
                 [])
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "list" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Var (Ident "preorder_traversal" ()) ())
                       (:
                        (ArgExpr
                         (Paren
                          (Tuple
                           (:
                            (Strings (: "'abc'" []) ())
                            (:
                             (Paren
                              (Tuple
                               (:
                                (Strings (: "'d'" []) ())
                                (: (Strings (: "'ef'" []) ()) []))
                               ())
                              ())
                             []))
                           ())
                          ())
                         ())
                        [])
                       ())
                      ())
                     [])
                    ())
                   (List
                    (:
                     (Paren
                      (Tuple
                       (:
                        (Strings (: "'abc'" []) ())
                        (:
                         (Paren
                          (Tuple
                           (:
                            (Strings (: "'d'" []) ())
                            (: (Strings (: "'ef'" []) ()) []))
                           ())
                          ())
                         []))
                       ())
                      ())
                     (:
                      (Strings (: "'abc'" []) ())
                      (:
                       (Paren
                        (Tuple
                         (:
                          (Strings (: "'d'" []) ())
                          (: (Strings (: "'ef'" []) ()) []))
                         ())
                        ())
                       (:
                        (Strings (: "'d'" []) ())
                        (: (Strings (: "'ef'" []) ()) [])))))
                    ())
                   ())
                  [])
                 ())
                [])))))))))
       ())
      (:
       (Fun
        (Ident "test_preorder_traversal" ())
        []
        Nothing
        (:
         (Assign
          (: (Var (Ident "expr" ()) ()) [])
          (BinaryOp
           (Plus ())
           (Var (Ident "z" ()) ())
           (BinaryOp
            (Multiply ())
            (Var (Ident "w" ()) ())
            (Paren
             (BinaryOp
              (Plus ())
              (Var (Ident "x" ()) ())
              (Var (Ident "y" ()) ())
              ())
             ())
            ())
           ())
          ())
         (:
          (Assign
           (: (Var (Ident "expected1" ()) ()) [])
           (List
            (:
             (BinaryOp
              (Plus ())
              (Var (Ident "z" ()) ())
              (BinaryOp
               (Multiply ())
               (Var (Ident "w" ()) ())
               (Paren
                (BinaryOp
                 (Plus ())
                 (Var (Ident "x" ()) ())
                 (Var (Ident "y" ()) ())
                 ())
                ())
               ())
              ())
             (:
              (Var (Ident "z" ()) ())
              (:
               (BinaryOp
                (Multiply ())
                (Var (Ident "w" ()) ())
                (Paren
                 (BinaryOp
                  (Plus ())
                  (Var (Ident "x" ()) ())
                  (Var (Ident "y" ()) ())
                  ())
                 ())
                ())
               (:
                (Var (Ident "w" ()) ())
                (:
                 (BinaryOp
                  (Plus ())
                  (Var (Ident "x" ()) ())
                  (Var (Ident "y" ()) ())
                  ())
                 (: (Var (Ident "y" ()) ()) (: (Var (Ident "x" ()) ()) [])))))))
            ())
           ())
          (:
           (Assign
            (: (Var (Ident "expected2" ()) ()) [])
            (List
             (:
              (BinaryOp
               (Plus ())
               (Var (Ident "z" ()) ())
               (BinaryOp
                (Multiply ())
                (Var (Ident "w" ()) ())
                (Paren
                 (BinaryOp
                  (Plus ())
                  (Var (Ident "x" ()) ())
                  (Var (Ident "y" ()) ())
                  ())
                 ())
                ())
               ())
              (:
               (Var (Ident "z" ()) ())
               (:
                (BinaryOp
                 (Multiply ())
                 (Var (Ident "w" ()) ())
                 (Paren
                  (BinaryOp
                   (Plus ())
                   (Var (Ident "x" ()) ())
                   (Var (Ident "y" ()) ())
                   ())
                  ())
                 ())
                (:
                 (Var (Ident "w" ()) ())
                 (:
                  (BinaryOp
                   (Plus ())
                   (Var (Ident "x" ()) ())
                   (Var (Ident "y" ()) ())
                   ())
                  (:
                   (Var (Ident "x" ()) ())
                   (: (Var (Ident "y" ()) ()) [])))))))
             ())
            ())
           (:
            (Assign
             (: (Var (Ident "expected3" ()) ()) [])
             (List
              (:
               (BinaryOp
                (Plus ())
                (Var (Ident "z" ()) ())
                (BinaryOp
                 (Multiply ())
                 (Var (Ident "w" ()) ())
                 (Paren
                  (BinaryOp
                   (Plus ())
                   (Var (Ident "x" ()) ())
                   (Var (Ident "y" ()) ())
                   ())
                  ())
                 ())
                ())
               (:
                (BinaryOp
                 (Multiply ())
                 (Var (Ident "w" ()) ())
                 (Paren
                  (BinaryOp
                   (Plus ())
                   (Var (Ident "x" ()) ())
                   (Var (Ident "y" ()) ())
                   ())
                  ())
                 ())
                (:
                 (Var (Ident "w" ()) ())
                 (:
                  (BinaryOp
                   (Plus ())
                   (Var (Ident "x" ()) ())
                   (Var (Ident "y" ()) ())
                   ())
                  (:
                   (Var (Ident "y" ()) ())
                   (:
                    (Var (Ident "x" ()) ())
                    (: (Var (Ident "z" ()) ()) [])))))))
              ())
             ())
            (:
             (Assert
              (:
               (BinaryOp
                (In ())
                (Call
                 (Var (Ident "list" ()) ())
                 (:
                  (ArgExpr
                   (Call
                    (Var (Ident "preorder_traversal" ()) ())
                    (: (ArgExpr (Var (Ident "expr" ()) ()) ()) [])
                    ())
                   ())
                  [])
                 ())
                (List
                 (:
                  (Var (Ident "expected1" ()) ())
                  (:
                   (Var (Ident "expected2" ()) ())
                   (: (Var (Ident "expected3" ()) ()) [])))
                 ())
                ())
               [])
              ())
             (:
              (Assign
               (: (Var (Ident "expr" ()) ()) [])
               (Call
                (Var (Ident "Piecewise" ()) ())
                (:
                 (ArgExpr
                  (Paren
                   (Tuple
                    (:
                     (Var (Ident "x" ()) ())
                     (:
                      (BinaryOp
                       (LessThan ())
                       (Var (Ident "x" ()) ())
                       (Int 1 "1" ())
                       ())
                      []))
                    ())
                   ())
                  ())
                 (:
                  (ArgExpr
                   (Paren
                    (Tuple
                     (:
                      (BinaryOp
                       (Exponent ())
                       (Var (Ident "x" ()) ())
                       (Int 2 "2" ())
                       ())
                      (: (Bool True ()) []))
                     ())
                    ())
                   ())
                  []))
                ())
               ())
              (:
               (Assert
                (:
                 (BinaryOp
                  (Equality ())
                  (Call
                   (Var (Ident "list" ()) ())
                   (:
                    (ArgExpr
                     (Call
                      (Var (Ident "preorder_traversal" ()) ())
                      (: (ArgExpr (Var (Ident "expr" ()) ()) ()) [])
                      ())
                     ())
                    [])
                   ())
                  (List
                   (:
                    (Call
                     (Var (Ident "Piecewise" ()) ())
                     (:
                      (ArgExpr
                       (Paren
                        (Tuple
                         (:
                          (Var (Ident "x" ()) ())
                          (:
                           (BinaryOp
                            (LessThan ())
                            (Var (Ident "x" ()) ())
                            (Int 1 "1" ())
                            ())
                           []))
                         ())
                        ())
                       ())
                      (:
                       (ArgExpr
                        (Paren
                         (Tuple
                          (:
                           (BinaryOp
                            (Exponent ())
                            (Var (Ident "x" ()) ())
                            (Int 2 "2" ())
                            ())
                           (: (Bool True ()) []))
                          ())
                         ())
                        ())
                       []))
                     ())
                    (:
                     (Call
                      (Var (Ident "ExprCondPair" ()) ())
                      (:
                       (ArgExpr (Var (Ident "x" ()) ()) ())
                       (:
                        (ArgExpr
                         (BinaryOp
                          (LessThan ())
                          (Var (Ident "x" ()) ())
                          (Int 1 "1" ())
                          ())
                         ())
                        []))
                      ())
                     (:
                      (Var (Ident "x" ()) ())
                      (:
                       (BinaryOp
                        (LessThan ())
                        (Var (Ident "x" ()) ())
                        (Int 1 "1" ())
                        ())
                       (:
                        (Var (Ident "x" ()) ())
                        (:
                         (Int 1 "1" ())
                         (:
                          (Call
                           (Var (Ident "ExprCondPair" ()) ())
                           (:
                            (ArgExpr
                             (BinaryOp
                              (Exponent ())
                              (Var (Ident "x" ()) ())
                              (Int 2 "2" ())
                              ())
                             ())
                            (: (ArgExpr (Bool True ()) ()) []))
                           ())
                          (:
                           (BinaryOp
                            (Exponent ())
                            (Var (Ident "x" ()) ())
                            (Int 2 "2" ())
                            ())
                           (:
                            (Var (Ident "x" ()) ())
                            (: (Int 2 "2" ()) (: (Bool True ()) [])))))))))))
                   ())
                  ())
                 [])
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "list" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Var (Ident "postorder_traversal" ()) ())
                       (:
                        (ArgExpr
                         (Call
                          (Var (Ident "Integral" ()) ())
                          (:
                           (ArgExpr
                            (BinaryOp
                             (Exponent ())
                             (Var (Ident "x" ()) ())
                             (Int 2 "2" ())
                             ())
                            ())
                           (:
                            (ArgExpr
                             (Paren
                              (Tuple
                               (:
                                (Var (Ident "x" ()) ())
                                (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                               ())
                              ())
                             ())
                            []))
                          ())
                         ())
                        [])
                       ())
                      ())
                     [])
                    ())
                   (List
                    (:
                     (Var (Ident "x" ()) ())
                     (:
                      (Int 2 "2" ())
                      (:
                       (BinaryOp
                        (Exponent ())
                        (Var (Ident "x" ()) ())
                        (Int 2 "2" ())
                        ())
                       (:
                        (Var (Ident "x" ()) ())
                        (:
                         (Int 0 "0" ())
                         (:
                          (Int 1 "1" ())
                          (:
                           (Paren
                            (Tuple (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])) ())
                            ())
                           (:
                            (Paren
                             (Tuple
                              (:
                               (Var (Ident "x" ()) ())
                               (:
                                (Paren
                                 (Tuple
                                  (: (Int 0 "0" ()) (: (Int 1 "1" ()) []))
                                  ())
                                 ())
                                []))
                              ())
                             ())
                            (:
                             (Paren
                              (Tuple
                               (:
                                (Paren
                                 (Tuple
                                  (:
                                   (Var (Ident "x" ()) ())
                                   (:
                                    (Paren
                                     (Tuple
                                      (: (Int 0 "0" ()) (: (Int 1 "1" ()) []))
                                      ())
                                     ())
                                    []))
                                  ())
                                 ())
                                [])
                               ())
                              ())
                             (:
                              (Call
                               (Var (Ident "Integral" ()) ())
                               (:
                                (ArgExpr
                                 (BinaryOp
                                  (Exponent ())
                                  (Var (Ident "x" ()) ())
                                  (Int 2 "2" ())
                                  ())
                                 ())
                                (:
                                 (ArgExpr
                                  (Paren
                                   (Tuple
                                    (:
                                     (Var (Ident "x" ()) ())
                                     (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                                    ())
                                   ())
                                  ())
                                 []))
                               ())
                              []))))))))))
                    ())
                   ())
                  [])
                 ())
                (:
                 (Assert
                  (:
                   (BinaryOp
                    (Equality ())
                    (Call
                     (Var (Ident "list" ()) ())
                     (:
                      (ArgExpr
                       (Call
                        (Var (Ident "postorder_traversal" ()) ())
                        (:
                         (ArgExpr
                          (Paren
                           (Tuple
                            (:
                             (Strings (: "'abc'" []) ())
                             (:
                              (Paren
                               (Tuple
                                (:
                                 (Strings (: "'d'" []) ())
                                 (: (Strings (: "'ef'" []) ()) []))
                                ())
                               ())
                              []))
                            ())
                           ())
                          ())
                         [])
                        ())
                       ())
                      [])
                     ())
                    (List
                     (:
                      (Strings (: "'abc'" []) ())
                      (:
                       (Strings (: "'d'" []) ())
                       (:
                        (Strings (: "'ef'" []) ())
                        (:
                         (Paren
                          (Tuple
                           (:
                            (Strings (: "'d'" []) ())
                            (: (Strings (: "'ef'" []) ()) []))
                           ())
                          ())
                         (:
                          (Paren
                           (Tuple
                            (:
                             (Strings (: "'abc'" []) ())
                             (:
                              (Paren
                               (Tuple
                                (:
                                 (Strings (: "'d'" []) ())
                                 (: (Strings (: "'ef'" []) ()) []))
                                ())
                               ())
                              []))
                            ())
                           ())
                          [])))))
                     ())
                    ())
                   [])
                  ())
                 [])))))))))
        ())
       (:
        (Fun
         (Ident "test_flatten" ())
         []
         Nothing
         (:
          (Assert
           (:
            (BinaryOp
             (Equality ())
             (Call
              (Var (Ident "flatten" ()) ())
              (:
               (ArgExpr
                (Paren
                 (Tuple
                  (:
                   (Int 1 "1" ())
                   (: (Paren (Tuple (: (Int 1 "1" ()) []) ()) ()) []))
                  ())
                 ())
                ())
               [])
              ())
             (List (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
             ())
            [])
           ())
          (:
           (Assert
            (:
             (BinaryOp
              (Equality ())
              (Call
               (Var (Ident "flatten" ()) ())
               (:
                (ArgExpr
                 (Paren
                  (Tuple
                   (:
                    (Var (Ident "x" ()) ())
                    (: (Paren (Tuple (: (Var (Ident "x" ()) ()) []) ()) ()) []))
                   ())
                  ())
                 ())
                [])
               ())
              (List
               (: (Var (Ident "x" ()) ()) (: (Var (Ident "x" ()) ()) []))
               ())
              ())
             [])
            ())
           (:
            (Assign
             (: (Var (Ident "ls" ()) ()) [])
             (List
              (:
               (List
                (:
                 (Paren
                  (Tuple
                   (:
                    (UnaryOp (Minus ()) (Int 2 "2" ()) ())
                    (: (UnaryOp (Minus ()) (Int 1 "1" ()) ()) []))
                   ())
                  ())
                 (:
                  (Paren (Tuple (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ()) ())
                  []))
                ())
               (:
                (List
                 (:
                  (Paren (Tuple (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])) ()) ())
                  [])
                 ())
                []))
              ())
             ())
            (:
             (Assert
              (:
               (BinaryOp
                (Equality ())
                (Call
                 (Var (Ident "flatten" ()) ())
                 (:
                  (ArgExpr (Var (Ident "ls" ()) ()) ())
                  (: (ArgKeyword (Ident "levels" ()) (Int 0 "0" ()) ()) []))
                 ())
                (Var (Ident "ls" ()) ())
                ())
               [])
              ())
             (:
              (Assert
               (:
                (BinaryOp
                 (Equality ())
                 (Call
                  (Var (Ident "flatten" ()) ())
                  (:
                   (ArgExpr (Var (Ident "ls" ()) ()) ())
                   (: (ArgKeyword (Ident "levels" ()) (Int 1 "1" ()) ()) []))
                  ())
                 (List
                  (:
                   (Paren
                    (Tuple
                     (:
                      (UnaryOp (Minus ()) (Int 2 "2" ()) ())
                      (: (UnaryOp (Minus ()) (Int 1 "1" ()) ()) []))
                     ())
                    ())
                   (:
                    (Paren
                     (Tuple (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                     ())
                    (:
                     (Paren
                      (Tuple (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])) ())
                      ())
                     [])))
                  ())
                 ())
                [])
               ())
              (:
               (Assert
                (:
                 (BinaryOp
                  (Equality ())
                  (Call
                   (Var (Ident "flatten" ()) ())
                   (:
                    (ArgExpr (Var (Ident "ls" ()) ()) ())
                    (: (ArgKeyword (Ident "levels" ()) (Int 2 "2" ()) ()) []))
                   ())
                  (List
                   (:
                    (UnaryOp (Minus ()) (Int 2 "2" ()) ())
                    (:
                     (UnaryOp (Minus ()) (Int 1 "1" ()) ())
                     (:
                      (Int 1 "1" ())
                      (:
                       (Int 2 "2" ())
                       (: (Int 0 "0" ()) (: (Int 0 "0" ()) []))))))
                   ())
                  ())
                 [])
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "flatten" ()) ())
                    (:
                     (ArgExpr (Var (Ident "ls" ()) ()) ())
                     (: (ArgKeyword (Ident "levels" ()) (Int 3 "3" ()) ()) []))
                    ())
                   (List
                    (:
                     (UnaryOp (Minus ()) (Int 2 "2" ()) ())
                     (:
                      (UnaryOp (Minus ()) (Int 1 "1" ()) ())
                      (:
                       (Int 1 "1" ())
                       (:
                        (Int 2 "2" ())
                        (: (Int 0 "0" ()) (: (Int 0 "0" ()) []))))))
                    ())
                   ())
                  [])
                 ())
                (:
                 (StmtExpr
                  (Call
                   (Var (Ident "raises" ()) ())
                   (:
                    (ArgExpr (Var (Ident "ValueError" ()) ()) ())
                    (:
                     (ArgExpr
                      (Strings (: "\"flatten(ls, levels=-1)\"" []) ())
                      ())
                     []))
                   ())
                  ())
                 (:
                  (Class
                   (Ident "MyOp" ())
                   (: (ArgExpr (Var (Ident "Basic" ()) ()) ()) [])
                   (: (Pass ()) [])
                   ())
                  (:
                   (Assert
                    (:
                     (BinaryOp
                      (Equality ())
                      (Call
                       (Var (Ident "flatten" ()) ())
                       (:
                        (ArgExpr
                         (List
                          (:
                           (Call
                            (Var (Ident "MyOp" ()) ())
                            (:
                             (ArgExpr (Var (Ident "x" ()) ()) ())
                             (: (ArgExpr (Var (Ident "y" ()) ()) ()) []))
                            ())
                           (: (Var (Ident "z" ()) ()) []))
                          ())
                         ())
                        [])
                       ())
                      (List
                       (:
                        (Call
                         (Var (Ident "MyOp" ()) ())
                         (:
                          (ArgExpr (Var (Ident "x" ()) ()) ())
                          (: (ArgExpr (Var (Ident "y" ()) ()) ()) []))
                         ())
                        (: (Var (Ident "z" ()) ()) []))
                       ())
                      ())
                     [])
                    ())
                   (:
                    (Assert
                     (:
                      (BinaryOp
                       (Equality ())
                       (Call
                        (Var (Ident "flatten" ()) ())
                        (:
                         (ArgExpr
                          (List
                           (:
                            (Call
                             (Var (Ident "MyOp" ()) ())
                             (:
                              (ArgExpr (Var (Ident "x" ()) ()) ())
                              (: (ArgExpr (Var (Ident "y" ()) ()) ()) []))
                             ())
                            (: (Var (Ident "z" ()) ()) []))
                           ())
                          ())
                         (:
                          (ArgKeyword
                           (Ident "cls" ())
                           (Var (Ident "MyOp" ()) ())
                           ())
                          []))
                        ())
                       (List
                        (:
                         (Var (Ident "x" ()) ())
                         (:
                          (Var (Ident "y" ()) ())
                          (: (Var (Ident "z" ()) ()) [])))
                        ())
                       ())
                      [])
                     ())
                    [])))))))))))
         ())
        (:
         (Fun
          (Ident "test_group" ())
          []
          Nothing
          (:
           (Assert
            (:
             (BinaryOp
              (Equality ())
              (Call
               (Var (Ident "group" ()) ())
               (: (ArgExpr (List [] ()) ()) [])
               ())
              (List [] ())
              ())
             [])
            ())
           (:
            (Assert
             (:
              (BinaryOp
               (Equality ())
               (Call
                (Var (Ident "group" ()) ())
                (:
                 (ArgExpr (List [] ()) ())
                 (: (ArgKeyword (Ident "multiple" ()) (Bool False ()) ()) []))
                ())
               (List [] ())
               ())
              [])
             ())
            (:
             (Assert
              (:
               (BinaryOp
                (Equality ())
                (Call
                 (Var (Ident "group" ()) ())
                 (: (ArgExpr (List (: (Int 1 "1" ()) []) ()) ()) [])
                 ())
                (List (: (List (: (Int 1 "1" ()) []) ()) []) ())
                ())
               [])
              ())
             (:
              (Assert
               (:
                (BinaryOp
                 (Equality ())
                 (Call
                  (Var (Ident "group" ()) ())
                  (:
                   (ArgExpr (List (: (Int 1 "1" ()) []) ()) ())
                   (: (ArgKeyword (Ident "multiple" ()) (Bool False ()) ()) []))
                  ())
                 (List
                  (:
                   (Paren
                    (Tuple (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                    ())
                   [])
                  ())
                 ())
                [])
               ())
              (:
               (Assert
                (:
                 (BinaryOp
                  (Equality ())
                  (Call
                   (Var (Ident "group" ()) ())
                   (:
                    (ArgExpr
                     (List (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                     ())
                    [])
                   ())
                  (List
                   (: (List (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ()) [])
                   ())
                  ())
                 [])
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "group" ()) ())
                    (:
                     (ArgExpr
                      (List (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                      ())
                     (:
                      (ArgKeyword (Ident "multiple" ()) (Bool False ()) ())
                      []))
                    ())
                   (List
                    (:
                     (Paren
                      (Tuple (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                      ())
                     [])
                    ())
                   ())
                  [])
                 ())
                (:
                 (Assert
                  (:
                   (BinaryOp
                    (Equality ())
                    (Call
                     (Var (Ident "group" ()) ())
                     (:
                      (ArgExpr
                       (List
                        (:
                         (Int 1 "1" ())
                         (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                        ())
                       ())
                      [])
                     ())
                    (List
                     (:
                      (List
                       (:
                        (Int 1 "1" ())
                        (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                       ())
                      [])
                     ())
                    ())
                   [])
                  ())
                 (:
                  (Assert
                   (:
                    (BinaryOp
                     (Equality ())
                     (Call
                      (Var (Ident "group" ()) ())
                      (:
                       (ArgExpr
                        (List
                         (:
                          (Int 1 "1" ())
                          (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                         ())
                        ())
                       (:
                        (ArgKeyword (Ident "multiple" ()) (Bool False ()) ())
                        []))
                      ())
                     (List
                      (:
                       (Paren
                        (Tuple (: (Int 1 "1" ()) (: (Int 3 "3" ()) [])) ())
                        ())
                       [])
                      ())
                     ())
                    [])
                   ())
                  (:
                   (Assert
                    (:
                     (BinaryOp
                      (Equality ())
                      (Call
                       (Var (Ident "group" ()) ())
                       (:
                        (ArgExpr
                         (List
                          (:
                           (Int 1 "1" ())
                           (: (Int 2 "2" ()) (: (Int 1 "1" ()) [])))
                          ())
                         ())
                        [])
                       ())
                      (List
                       (:
                        (List (: (Int 1 "1" ()) []) ())
                        (:
                         (List (: (Int 2 "2" ()) []) ())
                         (: (List (: (Int 1 "1" ()) []) ()) [])))
                       ())
                      ())
                     [])
                    ())
                   (:
                    (Assert
                     (:
                      (BinaryOp
                       (Equality ())
                       (Call
                        (Var (Ident "group" ()) ())
                        (:
                         (ArgExpr
                          (List
                           (:
                            (Int 1 "1" ())
                            (: (Int 2 "2" ()) (: (Int 1 "1" ()) [])))
                           ())
                          ())
                         (:
                          (ArgKeyword (Ident "multiple" ()) (Bool False ()) ())
                          []))
                        ())
                       (List
                        (:
                         (Paren
                          (Tuple (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                          ())
                         (:
                          (Paren
                           (Tuple (: (Int 2 "2" ()) (: (Int 1 "1" ()) [])) ())
                           ())
                          (:
                           (Paren
                            (Tuple (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                            ())
                           [])))
                        ())
                       ())
                      [])
                     ())
                    (:
                     (Assert
                      (:
                       (BinaryOp
                        (Equality ())
                        (Call
                         (Var (Ident "group" ()) ())
                         (:
                          (ArgExpr
                           (List
                            (:
                             (Int 1 "1" ())
                             (:
                              (Int 1 "1" ())
                              (:
                               (Int 2 "2" ())
                               (:
                                (Int 2 "2" ())
                                (:
                                 (Int 2 "2" ())
                                 (:
                                  (Int 1 "1" ())
                                  (: (Int 3 "3" ()) (: (Int 3 "3" ()) []))))))))
                            ())
                           ())
                          [])
                         ())
                        (List
                         (:
                          (List (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                          (:
                           (List
                            (:
                             (Int 2 "2" ())
                             (: (Int 2 "2" ()) (: (Int 2 "2" ()) [])))
                            ())
                           (:
                            (List (: (Int 1 "1" ()) []) ())
                            (:
                             (List (: (Int 3 "3" ()) (: (Int 3 "3" ()) [])) ())
                             []))))
                         ())
                        ())
                       [])
                      ())
                     (:
                      (Assert
                       (:
                        (BinaryOp
                         (Equality ())
                         (Call
                          (Var (Ident "group" ()) ())
                          (:
                           (ArgExpr
                            (List
                             (:
                              (Int 1 "1" ())
                              (:
                               (Int 1 "1" ())
                               (:
                                (Int 2 "2" ())
                                (:
                                 (Int 2 "2" ())
                                 (:
                                  (Int 2 "2" ())
                                  (:
                                   (Int 1 "1" ())
                                   (:
                                    (Int 3 "3" ())
                                    (: (Int 3 "3" ()) []))))))))
                             ())
                            ())
                           (:
                            (ArgKeyword
                             (Ident "multiple" ())
                             (Bool False ())
                             ())
                            []))
                          ())
                         (List
                          (:
                           (Paren
                            (Tuple (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                            ())
                           (:
                            (Paren
                             (Tuple (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])) ())
                             ())
                            (:
                             (Paren
                              (Tuple
                               (: (Int 1 "1" ()) (: (Int 1 "1" ()) []))
                               ())
                              ())
                             (:
                              (Paren
                               (Tuple
                                (: (Int 3 "3" ()) (: (Int 2 "2" ()) []))
                                ())
                               ())
                              []))))
                          ())
                         ())
                        [])
                       ())
                      []))))))))))))
          ())
         (:
          (Fun
           (Ident "test_split" ())
           []
           Nothing
           (:
            (Assert
             (:
              (BinaryOp
               (Equality ())
               (Call
                (Var (Ident "split" ()) ())
                (:
                 (ArgExpr (List [] ()) ())
                 (:
                  (ArgKeyword
                   (Ident "key" ())
                   (Lambda
                    (: (Param (Ident "a" ()) Nothing Nothing ()) [])
                    (BinaryOp
                     (Modulo ())
                     (Var (Ident "a" ()) ())
                     (Int 3 "3" ())
                     ())
                    ())
                   ())
                  []))
                ())
               (List [] ())
               ())
              [])
             ())
            (:
             (Assert
              (:
               (BinaryOp
                (Equality ())
                (Call
                 (Var (Ident "split" ()) ())
                 (:
                  (ArgExpr
                   (List
                    (:
                     (Int 16 "16" ())
                     (:
                      (Int 8 "8" ())
                      (:
                       (Int 3 "3" ())
                       (:
                        (Int 1 "1" ())
                        (:
                         (Int 2 "2" ())
                         (: (Int 5 "5" ()) (: (Int 7 "7" ()) [])))))))
                    ())
                   ())
                  (:
                   (ArgKeyword
                    (Ident "key" ())
                    (Lambda
                     (: (Param (Ident "a" ()) Nothing Nothing ()) [])
                     (BinaryOp
                      (Modulo ())
                      (Var (Ident "a" ()) ())
                      (Int 3 "3" ())
                      ())
                     ())
                    ())
                   []))
                 ())
                (List
                 (:
                  (List (: (Int 3 "3" ()) []) ())
                  (:
                   (List
                    (:
                     (Int 16 "16" ())
                     (: (Int 1 "1" ()) (: (Int 7 "7" ()) [])))
                    ())
                   (:
                    (List
                     (: (Int 8 "8" ()) (: (Int 2 "2" ()) (: (Int 5 "5" ()) [])))
                     ())
                    [])))
                 ())
                ())
               [])
              ())
             (:
              (Assert
               (:
                (BinaryOp
                 (Equality ())
                 (Call
                  (Var (Ident "split" ()) ())
                  (:
                   (ArgExpr
                    (List
                     (:
                      (Int 16 "16" ())
                      (:
                       (Int 8 "8" ())
                       (:
                        (Int 3 "3" ())
                        (:
                         (Int 7 "7" ())
                         (:
                          (Int 2 "2" ())
                          (: (Int 5 "5" ()) (: (Int 1 "1" ()) [])))))))
                     ())
                    ())
                   (:
                    (ArgKeyword
                     (Ident "key" ())
                     (Lambda
                      (: (Param (Ident "a" ()) Nothing Nothing ()) [])
                      (BinaryOp
                       (Modulo ())
                       (Var (Ident "a" ()) ())
                       (Int 3 "3" ())
                       ())
                      ())
                     ())
                    []))
                  ())
                 (List
                  (:
                   (List (: (Int 3 "3" ()) []) ())
                   (:
                    (List
                     (:
                      (Int 16 "16" ())
                      (: (Int 7 "7" ()) (: (Int 1 "1" ()) [])))
                     ())
                    (:
                     (List
                      (:
                       (Int 8 "8" ())
                       (: (Int 2 "2" ()) (: (Int 5 "5" ()) [])))
                      ())
                     [])))
                  ())
                 ())
                [])
               ())
              [])))
           ())
          (:
           (Fun
            (Ident "test_subsets" ())
            []
            Nothing
            (:
             (Assert
              (:
               (BinaryOp
                (Equality ())
                (Call
                 (Var (Ident "list" ()) ())
                 (:
                  (ArgExpr
                   (Call
                    (Var (Ident "subsets" ()) ())
                    (:
                     (ArgExpr
                      (List
                       (:
                        (Int 1 "1" ())
                        (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                       ())
                      ())
                     (: (ArgExpr (Int 0 "0" ()) ()) []))
                    ())
                   ())
                  [])
                 ())
                (List (: (List [] ()) []) ())
                ())
               [])
              ())
             (:
              (Assert
               (:
                (BinaryOp
                 (Equality ())
                 (Call
                  (Var (Ident "list" ()) ())
                  (:
                   (ArgExpr
                    (Call
                     (Var (Ident "subsets" ()) ())
                     (:
                      (ArgExpr
                       (List
                        (:
                         (Int 1 "1" ())
                         (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                        ())
                       ())
                      (: (ArgExpr (Int 1 "1" ()) ()) []))
                     ())
                    ())
                   [])
                  ())
                 (List
                  (:
                   (List (: (Int 1 "1" ()) []) ())
                   (:
                    (List (: (Int 2 "2" ()) []) ())
                    (: (List (: (Int 3 "3" ()) []) ()) [])))
                  ())
                 ())
                [])
               ())
              (:
               (Assert
                (:
                 (BinaryOp
                  (Equality ())
                  (Call
                   (Var (Ident "list" ()) ())
                   (:
                    (ArgExpr
                     (Call
                      (Var (Ident "subsets" ()) ())
                      (:
                       (ArgExpr
                        (List
                         (:
                          (Int 1 "1" ())
                          (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                         ())
                        ())
                       (: (ArgExpr (Int 2 "2" ()) ()) []))
                      ())
                     ())
                    [])
                   ())
                  (List
                   (:
                    (List (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                    (:
                     (List (: (Int 1 "1" ()) (: (Int 3 "3" ()) [])) ())
                     (: (List (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])) ()) [])))
                   ())
                  ())
                 [])
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "list" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Var (Ident "subsets" ()) ())
                       (:
                        (ArgExpr
                         (List
                          (:
                           (Int 1 "1" ())
                           (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                          ())
                         ())
                        (: (ArgExpr (Int 3 "3" ()) ()) []))
                       ())
                      ())
                     [])
                    ())
                   (List
                    (:
                     (List
                      (:
                       (Int 1 "1" ())
                       (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                      ())
                     [])
                    ())
                   ())
                  [])
                 ())
                (:
                 (Assign
                  (: (Var (Ident "l" ()) ()) [])
                  (Call
                   (Var (Ident "range" ()) ())
                   (: (ArgExpr (Int 4 "4" ()) ()) [])
                   ())
                  ())
                 (:
                  (Assert
                   (:
                    (BinaryOp
                     (Equality ())
                     (Call
                      (Var (Ident "list" ()) ())
                      (:
                       (ArgExpr
                        (Call
                         (Var (Ident "subsets" ()) ())
                         (:
                          (ArgExpr (Var (Ident "l" ()) ()) ())
                          (:
                           (ArgExpr (Int 0 "0" ()) ())
                           (:
                            (ArgKeyword
                             (Ident "repetition" ())
                             (Bool True ())
                             ())
                            [])))
                         ())
                        ())
                       [])
                      ())
                     (List (: (List [] ()) []) ())
                     ())
                    [])
                   ())
                  (:
                   (Assert
                    (:
                     (BinaryOp
                      (Equality ())
                      (Call
                       (Var (Ident "list" ()) ())
                       (:
                        (ArgExpr
                         (Call
                          (Var (Ident "subsets" ()) ())
                          (:
                           (ArgExpr (Var (Ident "l" ()) ()) ())
                           (:
                            (ArgExpr (Int 1 "1" ()) ())
                            (:
                             (ArgKeyword
                              (Ident "repetition" ())
                              (Bool True ())
                              ())
                             [])))
                          ())
                         ())
                        [])
                       ())
                      (List
                       (:
                        (List (: (Int 0 "0" ()) []) ())
                        (:
                         (List (: (Int 1 "1" ()) []) ())
                         (:
                          (List (: (Int 2 "2" ()) []) ())
                          (: (List (: (Int 3 "3" ()) []) ()) []))))
                       ())
                      ())
                     [])
                    ())
                   (:
                    (Assert
                     (:
                      (BinaryOp
                       (Equality ())
                       (Call
                        (Var (Ident "list" ()) ())
                        (:
                         (ArgExpr
                          (Call
                           (Var (Ident "subsets" ()) ())
                           (:
                            (ArgExpr (Var (Ident "l" ()) ()) ())
                            (:
                             (ArgExpr (Int 2 "2" ()) ())
                             (:
                              (ArgKeyword
                               (Ident "repetition" ())
                               (Bool True ())
                               ())
                              [])))
                           ())
                          ())
                         [])
                        ())
                       (List
                        (:
                         (List (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])) ())
                         (:
                          (List (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])) ())
                          (:
                           (List (: (Int 0 "0" ()) (: (Int 2 "2" ()) [])) ())
                           (:
                            (List (: (Int 0 "0" ()) (: (Int 3 "3" ()) [])) ())
                            (:
                             (List (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])) ())
                             (:
                              (List (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                              (:
                               (List
                                (: (Int 1 "1" ()) (: (Int 3 "3" ()) []))
                                ())
                               (:
                                (List
                                 (: (Int 2 "2" ()) (: (Int 2 "2" ()) []))
                                 ())
                                (:
                                 (List
                                  (: (Int 2 "2" ()) (: (Int 3 "3" ()) []))
                                  ())
                                 (:
                                  (List
                                   (: (Int 3 "3" ()) (: (Int 3 "3" ()) []))
                                   ())
                                  []))))))))))
                        ())
                       ())
                      [])
                     ())
                    (:
                     (Assert
                      (:
                       (BinaryOp
                        (Equality ())
                        (Call
                         (Var (Ident "list" ()) ())
                         (:
                          (ArgExpr
                           (Call
                            (Var (Ident "subsets" ()) ())
                            (:
                             (ArgExpr (Var (Ident "l" ()) ()) ())
                             (:
                              (ArgExpr (Int 3 "3" ()) ())
                              (:
                               (ArgKeyword
                                (Ident "repetition" ())
                                (Bool True ())
                                ())
                               [])))
                            ())
                           ())
                          [])
                         ())
                        (List
                         (:
                          (List
                           (:
                            (Int 0 "0" ())
                            (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])))
                           ())
                          (:
                           (List
                            (:
                             (Int 0 "0" ())
                             (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                            ())
                           (:
                            (List
                             (:
                              (Int 0 "0" ())
                              (: (Int 0 "0" ()) (: (Int 2 "2" ()) [])))
                             ())
                            (:
                             (List
                              (:
                               (Int 0 "0" ())
                               (: (Int 0 "0" ()) (: (Int 3 "3" ()) [])))
                              ())
                             (:
                              (List
                               (:
                                (Int 0 "0" ())
                                (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                               ())
                              (:
                               (List
                                (:
                                 (Int 0 "0" ())
                                 (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])))
                                ())
                               (:
                                (List
                                 (:
                                  (Int 0 "0" ())
                                  (: (Int 1 "1" ()) (: (Int 3 "3" ()) [])))
                                 ())
                                (:
                                 (List
                                  (:
                                   (Int 0 "0" ())
                                   (: (Int 2 "2" ()) (: (Int 2 "2" ()) [])))
                                  ())
                                 (:
                                  (List
                                   (:
                                    (Int 0 "0" ())
                                    (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                                   ())
                                  (:
                                   (List
                                    (:
                                     (Int 0 "0" ())
                                     (: (Int 3 "3" ()) (: (Int 3 "3" ()) [])))
                                    ())
                                   (:
                                    (List
                                     (:
                                      (Int 1 "1" ())
                                      (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                                     ())
                                    (:
                                     (List
                                      (:
                                       (Int 1 "1" ())
                                       (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])))
                                      ())
                                     (:
                                      (List
                                       (:
                                        (Int 1 "1" ())
                                        (:
                                         (Int 1 "1" ())
                                         (: (Int 3 "3" ()) [])))
                                       ())
                                      (:
                                       (List
                                        (:
                                         (Int 1 "1" ())
                                         (:
                                          (Int 2 "2" ())
                                          (: (Int 2 "2" ()) [])))
                                        ())
                                       (:
                                        (List
                                         (:
                                          (Int 1 "1" ())
                                          (:
                                           (Int 2 "2" ())
                                           (: (Int 3 "3" ()) [])))
                                         ())
                                        (:
                                         (List
                                          (:
                                           (Int 1 "1" ())
                                           (:
                                            (Int 3 "3" ())
                                            (: (Int 3 "3" ()) [])))
                                          ())
                                         (:
                                          (List
                                           (:
                                            (Int 2 "2" ())
                                            (:
                                             (Int 2 "2" ())
                                             (: (Int 2 "2" ()) [])))
                                           ())
                                          (:
                                           (List
                                            (:
                                             (Int 2 "2" ())
                                             (:
                                              (Int 2 "2" ())
                                              (: (Int 3 "3" ()) [])))
                                            ())
                                           (:
                                            (List
                                             (:
                                              (Int 2 "2" ())
                                              (:
                                               (Int 3 "3" ())
                                               (: (Int 3 "3" ()) [])))
                                             ())
                                            (:
                                             (List
                                              (:
                                               (Int 3 "3" ())
                                               (:
                                                (Int 3 "3" ())
                                                (: (Int 3 "3" ()) [])))
                                              ())
                                             []))))))))))))))))))))
                         ())
                        ())
                       [])
                      ())
                     (:
                      (Assert
                       (:
                        (BinaryOp
                         (Equality ())
                         (Call
                          (Var (Ident "len" ()) ())
                          (:
                           (ArgExpr
                            (Call
                             (Var (Ident "list" ()) ())
                             (:
                              (ArgExpr
                               (Call
                                (Var (Ident "subsets" ()) ())
                                (:
                                 (ArgExpr (Var (Ident "l" ()) ()) ())
                                 (:
                                  (ArgExpr (Int 4 "4" ()) ())
                                  (:
                                   (ArgKeyword
                                    (Ident "repetition" ())
                                    (Bool True ())
                                    ())
                                   [])))
                                ())
                               ())
                              [])
                             ())
                            ())
                           [])
                          ())
                         (Int 35 "35" ())
                         ())
                        [])
                       ())
                      (:
                       (Assert
                        (:
                         (BinaryOp
                          (Equality ())
                          (Call
                           (Var (Ident "list" ()) ())
                           (:
                            (ArgExpr
                             (Call
                              (Var (Ident "subsets" ()) ())
                              (:
                               (ArgExpr
                                (SlicedExpr
                                 (Var (Ident "l" ()) ())
                                 (:
                                  (SliceProper
                                   Nothing
                                   (Just (Int 2 "2" ()))
                                   Nothing
                                   ())
                                  [])
                                 ())
                                ())
                               (:
                                (ArgExpr (Int 3 "3" ()) ())
                                (:
                                 (ArgKeyword
                                  (Ident "repetition" ())
                                  (Bool False ())
                                  ())
                                 [])))
                              ())
                             ())
                            [])
                           ())
                          (List [] ())
                          ())
                         [])
                        ())
                       (:
                        (Assert
                         (:
                          (BinaryOp
                           (Equality ())
                           (Call
                            (Var (Ident "list" ()) ())
                            (:
                             (ArgExpr
                              (Call
                               (Var (Ident "subsets" ()) ())
                               (:
                                (ArgExpr
                                 (SlicedExpr
                                  (Var (Ident "l" ()) ())
                                  (:
                                   (SliceProper
                                    Nothing
                                    (Just (Int 2 "2" ()))
                                    Nothing
                                    ())
                                   [])
                                  ())
                                 ())
                                (:
                                 (ArgExpr (Int 3 "3" ()) ())
                                 (:
                                  (ArgKeyword
                                   (Ident "repetition" ())
                                   (Bool True ())
                                   ())
                                  [])))
                               ())
                              ())
                             [])
                            ())
                           (List
                            (:
                             (List
                              (:
                               (Int 0 "0" ())
                               (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])))
                              ())
                             (:
                              (List
                               (:
                                (Int 0 "0" ())
                                (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                               ())
                              (:
                               (List
                                (:
                                 (Int 0 "0" ())
                                 (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                                ())
                               (:
                                (List
                                 (:
                                  (Int 1 "1" ())
                                  (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                                 ())
                                []))))
                            ())
                           ())
                          [])
                         ())
                        []))))))))))))
            ())
           (:
            (Fun
             (Ident "test_variations" ())
             []
             Nothing
             (:
              (Assign
               (: (Var (Ident "l" ()) ()) [])
               (Call
                (Var (Ident "range" ()) ())
                (: (ArgExpr (Int 4 "4" ()) ()) [])
                ())
               ())
              (:
               (Assert
                (:
                 (BinaryOp
                  (Equality ())
                  (Call
                   (Var (Ident "list" ()) ())
                   (:
                    (ArgExpr
                     (Call
                      (Var (Ident "variations" ()) ())
                      (:
                       (ArgExpr (Var (Ident "l" ()) ()) ())
                       (:
                        (ArgExpr (Int 0 "0" ()) ())
                        (:
                         (ArgKeyword (Ident "repetition" ()) (Bool False ()) ())
                         [])))
                      ())
                     ())
                    [])
                   ())
                  (List (: (List [] ()) []) ())
                  ())
                 [])
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "list" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Var (Ident "variations" ()) ())
                       (:
                        (ArgExpr (Var (Ident "l" ()) ()) ())
                        (:
                         (ArgExpr (Int 1 "1" ()) ())
                         (:
                          (ArgKeyword
                           (Ident "repetition" ())
                           (Bool False ())
                           ())
                          [])))
                       ())
                      ())
                     [])
                    ())
                   (List
                    (:
                     (List (: (Int 0 "0" ()) []) ())
                     (:
                      (List (: (Int 1 "1" ()) []) ())
                      (:
                       (List (: (Int 2 "2" ()) []) ())
                       (: (List (: (Int 3 "3" ()) []) ()) []))))
                    ())
                   ())
                  [])
                 ())
                (:
                 (Assert
                  (:
                   (BinaryOp
                    (Equality ())
                    (Call
                     (Var (Ident "list" ()) ())
                     (:
                      (ArgExpr
                       (Call
                        (Var (Ident "variations" ()) ())
                        (:
                         (ArgExpr (Var (Ident "l" ()) ()) ())
                         (:
                          (ArgExpr (Int 2 "2" ()) ())
                          (:
                           (ArgKeyword
                            (Ident "repetition" ())
                            (Bool False ())
                            ())
                           [])))
                        ())
                       ())
                      [])
                     ())
                    (List
                     (:
                      (List (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])) ())
                      (:
                       (List (: (Int 0 "0" ()) (: (Int 2 "2" ()) [])) ())
                       (:
                        (List (: (Int 0 "0" ()) (: (Int 3 "3" ()) [])) ())
                        (:
                         (List (: (Int 1 "1" ()) (: (Int 0 "0" ()) [])) ())
                         (:
                          (List (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                          (:
                           (List (: (Int 1 "1" ()) (: (Int 3 "3" ()) [])) ())
                           (:
                            (List (: (Int 2 "2" ()) (: (Int 0 "0" ()) [])) ())
                            (:
                             (List (: (Int 2 "2" ()) (: (Int 1 "1" ()) [])) ())
                             (:
                              (List (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])) ())
                              (:
                               (List
                                (: (Int 3 "3" ()) (: (Int 0 "0" ()) []))
                                ())
                               (:
                                (List
                                 (: (Int 3 "3" ()) (: (Int 1 "1" ()) []))
                                 ())
                                (:
                                 (List
                                  (: (Int 3 "3" ()) (: (Int 2 "2" ()) []))
                                  ())
                                 []))))))))))))
                     ())
                    ())
                   [])
                  ())
                 (:
                  (Assert
                   (:
                    (BinaryOp
                     (Equality ())
                     (Call
                      (Var (Ident "list" ()) ())
                      (:
                       (ArgExpr
                        (Call
                         (Var (Ident "variations" ()) ())
                         (:
                          (ArgExpr (Var (Ident "l" ()) ()) ())
                          (:
                           (ArgExpr (Int 3 "3" ()) ())
                           (:
                            (ArgKeyword
                             (Ident "repetition" ())
                             (Bool False ())
                             ())
                            [])))
                         ())
                        ())
                       [])
                      ())
                     (List
                      (:
                       (List
                        (:
                         (Int 0 "0" ())
                         (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])))
                        ())
                       (:
                        (List
                         (:
                          (Int 0 "0" ())
                          (: (Int 1 "1" ()) (: (Int 3 "3" ()) [])))
                         ())
                        (:
                         (List
                          (:
                           (Int 0 "0" ())
                           (: (Int 2 "2" ()) (: (Int 1 "1" ()) [])))
                          ())
                         (:
                          (List
                           (:
                            (Int 0 "0" ())
                            (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                           ())
                          (:
                           (List
                            (:
                             (Int 0 "0" ())
                             (: (Int 3 "3" ()) (: (Int 1 "1" ()) [])))
                            ())
                           (:
                            (List
                             (:
                              (Int 0 "0" ())
                              (: (Int 3 "3" ()) (: (Int 2 "2" ()) [])))
                             ())
                            (:
                             (List
                              (:
                               (Int 1 "1" ())
                               (: (Int 0 "0" ()) (: (Int 2 "2" ()) [])))
                              ())
                             (:
                              (List
                               (:
                                (Int 1 "1" ())
                                (: (Int 0 "0" ()) (: (Int 3 "3" ()) [])))
                               ())
                              (:
                               (List
                                (:
                                 (Int 1 "1" ())
                                 (: (Int 2 "2" ()) (: (Int 0 "0" ()) [])))
                                ())
                               (:
                                (List
                                 (:
                                  (Int 1 "1" ())
                                  (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])))
                                 ())
                                (:
                                 (List
                                  (:
                                   (Int 1 "1" ())
                                   (: (Int 3 "3" ()) (: (Int 0 "0" ()) [])))
                                  ())
                                 (:
                                  (List
                                   (:
                                    (Int 1 "1" ())
                                    (: (Int 3 "3" ()) (: (Int 2 "2" ()) [])))
                                   ())
                                  (:
                                   (List
                                    (:
                                     (Int 2 "2" ())
                                     (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                                    ())
                                   (:
                                    (List
                                     (:
                                      (Int 2 "2" ())
                                      (: (Int 0 "0" ()) (: (Int 3 "3" ()) [])))
                                     ())
                                    (:
                                     (List
                                      (:
                                       (Int 2 "2" ())
                                       (: (Int 1 "1" ()) (: (Int 0 "0" ()) [])))
                                      ())
                                     (:
                                      (List
                                       (:
                                        (Int 2 "2" ())
                                        (:
                                         (Int 1 "1" ())
                                         (: (Int 3 "3" ()) [])))
                                       ())
                                      (:
                                       (List
                                        (:
                                         (Int 2 "2" ())
                                         (:
                                          (Int 3 "3" ())
                                          (: (Int 0 "0" ()) [])))
                                        ())
                                       (:
                                        (List
                                         (:
                                          (Int 2 "2" ())
                                          (:
                                           (Int 3 "3" ())
                                           (: (Int 1 "1" ()) [])))
                                         ())
                                        (:
                                         (List
                                          (:
                                           (Int 3 "3" ())
                                           (:
                                            (Int 0 "0" ())
                                            (: (Int 1 "1" ()) [])))
                                          ())
                                         (:
                                          (List
                                           (:
                                            (Int 3 "3" ())
                                            (:
                                             (Int 0 "0" ())
                                             (: (Int 2 "2" ()) [])))
                                           ())
                                          (:
                                           (List
                                            (:
                                             (Int 3 "3" ())
                                             (:
                                              (Int 1 "1" ())
                                              (: (Int 0 "0" ()) [])))
                                            ())
                                           (:
                                            (List
                                             (:
                                              (Int 3 "3" ())
                                              (:
                                               (Int 1 "1" ())
                                               (: (Int 2 "2" ()) [])))
                                             ())
                                            (:
                                             (List
                                              (:
                                               (Int 3 "3" ())
                                               (:
                                                (Int 2 "2" ())
                                                (: (Int 0 "0" ()) [])))
                                              ())
                                             (:
                                              (List
                                               (:
                                                (Int 3 "3" ())
                                                (:
                                                 (Int 2 "2" ())
                                                 (: (Int 1 "1" ()) [])))
                                               ())
                                              []))))))))))))))))))))))))
                      ())
                     ())
                    [])
                   ())
                  (:
                   (Assert
                    (:
                     (BinaryOp
                      (Equality ())
                      (Call
                       (Var (Ident "list" ()) ())
                       (:
                        (ArgExpr
                         (Call
                          (Var (Ident "variations" ()) ())
                          (:
                           (ArgExpr (Var (Ident "l" ()) ()) ())
                           (:
                            (ArgExpr (Int 0 "0" ()) ())
                            (:
                             (ArgKeyword
                              (Ident "repetition" ())
                              (Bool True ())
                              ())
                             [])))
                          ())
                         ())
                        [])
                       ())
                      (List (: (List [] ()) []) ())
                      ())
                     [])
                    ())
                   (:
                    (Assert
                     (:
                      (BinaryOp
                       (Equality ())
                       (Call
                        (Var (Ident "list" ()) ())
                        (:
                         (ArgExpr
                          (Call
                           (Var (Ident "variations" ()) ())
                           (:
                            (ArgExpr (Var (Ident "l" ()) ()) ())
                            (:
                             (ArgExpr (Int 1 "1" ()) ())
                             (:
                              (ArgKeyword
                               (Ident "repetition" ())
                               (Bool True ())
                               ())
                              [])))
                           ())
                          ())
                         [])
                        ())
                       (List
                        (:
                         (List (: (Int 0 "0" ()) []) ())
                         (:
                          (List (: (Int 1 "1" ()) []) ())
                          (:
                           (List (: (Int 2 "2" ()) []) ())
                           (: (List (: (Int 3 "3" ()) []) ()) []))))
                        ())
                       ())
                      [])
                     ())
                    (:
                     (Assert
                      (:
                       (BinaryOp
                        (Equality ())
                        (Call
                         (Var (Ident "list" ()) ())
                         (:
                          (ArgExpr
                           (Call
                            (Var (Ident "variations" ()) ())
                            (:
                             (ArgExpr (Var (Ident "l" ()) ()) ())
                             (:
                              (ArgExpr (Int 2 "2" ()) ())
                              (:
                               (ArgKeyword
                                (Ident "repetition" ())
                                (Bool True ())
                                ())
                               [])))
                            ())
                           ())
                          [])
                         ())
                        (List
                         (:
                          (List (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])) ())
                          (:
                           (List (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])) ())
                           (:
                            (List (: (Int 0 "0" ()) (: (Int 2 "2" ()) [])) ())
                            (:
                             (List (: (Int 0 "0" ()) (: (Int 3 "3" ()) [])) ())
                             (:
                              (List (: (Int 1 "1" ()) (: (Int 0 "0" ()) [])) ())
                              (:
                               (List
                                (: (Int 1 "1" ()) (: (Int 1 "1" ()) []))
                                ())
                               (:
                                (List
                                 (: (Int 1 "1" ()) (: (Int 2 "2" ()) []))
                                 ())
                                (:
                                 (List
                                  (: (Int 1 "1" ()) (: (Int 3 "3" ()) []))
                                  ())
                                 (:
                                  (List
                                   (: (Int 2 "2" ()) (: (Int 0 "0" ()) []))
                                   ())
                                  (:
                                   (List
                                    (: (Int 2 "2" ()) (: (Int 1 "1" ()) []))
                                    ())
                                   (:
                                    (List
                                     (: (Int 2 "2" ()) (: (Int 2 "2" ()) []))
                                     ())
                                    (:
                                     (List
                                      (: (Int 2 "2" ()) (: (Int 3 "3" ()) []))
                                      ())
                                     (:
                                      (List
                                       (: (Int 3 "3" ()) (: (Int 0 "0" ()) []))
                                       ())
                                      (:
                                       (List
                                        (: (Int 3 "3" ()) (: (Int 1 "1" ()) []))
                                        ())
                                       (:
                                        (List
                                         (:
                                          (Int 3 "3" ())
                                          (: (Int 2 "2" ()) []))
                                         ())
                                        (:
                                         (List
                                          (:
                                           (Int 3 "3" ())
                                           (: (Int 3 "3" ()) []))
                                          ())
                                         []))))))))))))))))
                         ())
                        ())
                       [])
                      ())
                     (:
                      (Assert
                       (:
                        (BinaryOp
                         (Equality ())
                         (Call
                          (Var (Ident "len" ()) ())
                          (:
                           (ArgExpr
                            (Call
                             (Var (Ident "list" ()) ())
                             (:
                              (ArgExpr
                               (Call
                                (Var (Ident "variations" ()) ())
                                (:
                                 (ArgExpr (Var (Ident "l" ()) ()) ())
                                 (:
                                  (ArgExpr (Int 3 "3" ()) ())
                                  (:
                                   (ArgKeyword
                                    (Ident "repetition" ())
                                    (Bool True ())
                                    ())
                                   [])))
                                ())
                               ())
                              [])
                             ())
                            ())
                           [])
                          ())
                         (Int 64 "64" ())
                         ())
                        [])
                       ())
                      (:
                       (Assert
                        (:
                         (BinaryOp
                          (Equality ())
                          (Call
                           (Var (Ident "len" ()) ())
                           (:
                            (ArgExpr
                             (Call
                              (Var (Ident "list" ()) ())
                              (:
                               (ArgExpr
                                (Call
                                 (Var (Ident "variations" ()) ())
                                 (:
                                  (ArgExpr (Var (Ident "l" ()) ()) ())
                                  (:
                                   (ArgExpr (Int 4 "4" ()) ())
                                   (:
                                    (ArgKeyword
                                     (Ident "repetition" ())
                                     (Bool True ())
                                     ())
                                    [])))
                                 ())
                                ())
                               [])
                              ())
                             ())
                            [])
                           ())
                          (Int 256 "256" ())
                          ())
                         [])
                        ())
                       (:
                        (Assert
                         (:
                          (BinaryOp
                           (Equality ())
                           (Call
                            (Var (Ident "list" ()) ())
                            (:
                             (ArgExpr
                              (Call
                               (Var (Ident "variations" ()) ())
                               (:
                                (ArgExpr
                                 (SlicedExpr
                                  (Var (Ident "l" ()) ())
                                  (:
                                   (SliceProper
                                    Nothing
                                    (Just (Int 2 "2" ()))
                                    Nothing
                                    ())
                                   [])
                                  ())
                                 ())
                                (:
                                 (ArgExpr (Int 3 "3" ()) ())
                                 (:
                                  (ArgKeyword
                                   (Ident "repetition" ())
                                   (Bool False ())
                                   ())
                                  [])))
                               ())
                              ())
                             [])
                            ())
                           (List [] ())
                           ())
                          [])
                         ())
                        (:
                         (Assert
                          (:
                           (BinaryOp
                            (Equality ())
                            (Call
                             (Var (Ident "list" ()) ())
                             (:
                              (ArgExpr
                               (Call
                                (Var (Ident "variations" ()) ())
                                (:
                                 (ArgExpr
                                  (SlicedExpr
                                   (Var (Ident "l" ()) ())
                                   (:
                                    (SliceProper
                                     Nothing
                                     (Just (Int 2 "2" ()))
                                     Nothing
                                     ())
                                    [])
                                   ())
                                  ())
                                 (:
                                  (ArgExpr (Int 3 "3" ()) ())
                                  (:
                                   (ArgKeyword
                                    (Ident "repetition" ())
                                    (Bool True ())
                                    ())
                                   [])))
                                ())
                               ())
                              [])
                             ())
                            (List
                             (:
                              (List
                               (:
                                (Int 0 "0" ())
                                (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])))
                               ())
                              (:
                               (List
                                (:
                                 (Int 0 "0" ())
                                 (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                                ())
                               (:
                                (List
                                 (:
                                  (Int 0 "0" ())
                                  (: (Int 1 "1" ()) (: (Int 0 "0" ()) [])))
                                 ())
                                (:
                                 (List
                                  (:
                                   (Int 0 "0" ())
                                   (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                                  ())
                                 (:
                                  (List
                                   (:
                                    (Int 1 "1" ())
                                    (: (Int 0 "0" ()) (: (Int 0 "0" ()) [])))
                                   ())
                                  (:
                                   (List
                                    (:
                                     (Int 1 "1" ())
                                     (: (Int 0 "0" ()) (: (Int 1 "1" ()) [])))
                                    ())
                                   (:
                                    (List
                                     (:
                                      (Int 1 "1" ())
                                      (: (Int 1 "1" ()) (: (Int 0 "0" ()) [])))
                                     ())
                                    (:
                                     (List
                                      (:
                                       (Int 1 "1" ())
                                       (: (Int 1 "1" ()) (: (Int 1 "1" ()) [])))
                                      ())
                                     []))))))))
                             ())
                            ())
                           [])
                          ())
                         []))))))))))))
             ())
            (:
             (Fun
              (Ident "test_take" ())
              []
              Nothing
              (:
               (Assign
                (: (Var (Ident "X" ()) ()) [])
                (Call (Var (Ident "numbered_symbols" ()) ()) [] ())
                ())
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "take" ()) ())
                    (:
                     (ArgExpr (Var (Ident "X" ()) ()) ())
                     (: (ArgExpr (Int 5 "5" ()) ()) []))
                    ())
                   (Call
                    (Var (Ident "list" ()) ())
                    (:
                     (ArgExpr
                      (Call
                       (Var (Ident "symbols" ()) ())
                       (: (ArgExpr (Strings (: "'x0:5'" []) ()) ()) [])
                       ())
                      ())
                     [])
                    ())
                   ())
                  [])
                 ())
                (:
                 (Assert
                  (:
                   (BinaryOp
                    (Equality ())
                    (Call
                     (Var (Ident "take" ()) ())
                     (:
                      (ArgExpr (Var (Ident "X" ()) ()) ())
                      (: (ArgExpr (Int 5 "5" ()) ()) []))
                     ())
                    (Call
                     (Var (Ident "list" ()) ())
                     (:
                      (ArgExpr
                       (Call
                        (Var (Ident "symbols" ()) ())
                        (: (ArgExpr (Strings (: "'x5:10'" []) ()) ()) [])
                        ())
                       ())
                      [])
                     ())
                    ())
                   [])
                  ())
                 [])))
              ())
             (:
              (Fun
               (Ident "test_dict_merge" ())
               []
               Nothing
               (:
                (Assert
                 (:
                  (BinaryOp
                   (Equality ())
                   (Call
                    (Var (Ident "dict_merge" ()) ())
                    (:
                     (ArgExpr (Dictionary [] ()) ())
                     (:
                      (ArgExpr
                       (Dictionary
                        (:
                         (DictMappingPair
                          (Int 1 "1" ())
                          (Var (Ident "x" ()) ()))
                         (:
                          (DictMappingPair
                           (Var (Ident "y" ()) ())
                           (Var (Ident "z" ()) ()))
                          []))
                        ())
                       ())
                      []))
                    ())
                   (Dictionary
                    (:
                     (DictMappingPair (Int 1 "1" ()) (Var (Ident "x" ()) ()))
                     (:
                      (DictMappingPair
                       (Var (Ident "y" ()) ())
                       (Var (Ident "z" ()) ()))
                      []))
                    ())
                   ())
                  [])
                 ())
                (:
                 (Assert
                  (:
                   (BinaryOp
                    (Equality ())
                    (Call
                     (Var (Ident "dict_merge" ()) ())
                     (:
                      (ArgExpr
                       (Dictionary
                        (:
                         (DictMappingPair
                          (Int 1 "1" ())
                          (Var (Ident "x" ()) ()))
                         (:
                          (DictMappingPair
                           (Var (Ident "y" ()) ())
                           (Var (Ident "z" ()) ()))
                          []))
                        ())
                       ())
                      (: (ArgExpr (Dictionary [] ()) ()) []))
                     ())
                    (Dictionary
                     (:
                      (DictMappingPair (Int 1 "1" ()) (Var (Ident "x" ()) ()))
                      (:
                       (DictMappingPair
                        (Var (Ident "y" ()) ())
                        (Var (Ident "z" ()) ()))
                       []))
                     ())
                    ())
                   [])
                  ())
                 (:
                  (Assert
                   (:
                    (BinaryOp
                     (Equality ())
                     (Call
                      (Var (Ident "dict_merge" ()) ())
                      (:
                       (ArgExpr
                        (Dictionary
                         (:
                          (DictMappingPair
                           (Int 2 "2" ())
                           (Var (Ident "z" ()) ()))
                          [])
                         ())
                        ())
                       (:
                        (ArgExpr
                         (Dictionary
                          (:
                           (DictMappingPair
                            (Int 1 "1" ())
                            (Var (Ident "x" ()) ()))
                           (:
                            (DictMappingPair
                             (Var (Ident "y" ()) ())
                             (Var (Ident "z" ()) ()))
                            []))
                          ())
                         ())
                        []))
                      ())
                     (Dictionary
                      (:
                       (DictMappingPair (Int 1 "1" ()) (Var (Ident "x" ()) ()))
                       (:
                        (DictMappingPair (Int 2 "2" ()) (Var (Ident "z" ()) ()))
                        (:
                         (DictMappingPair
                          (Var (Ident "y" ()) ())
                          (Var (Ident "z" ()) ()))
                         [])))
                      ())
                     ())
                    [])
                   ())
                  (:
                   (Assert
                    (:
                     (BinaryOp
                      (Equality ())
                      (Call
                       (Var (Ident "dict_merge" ()) ())
                       (:
                        (ArgExpr
                         (Dictionary
                          (:
                           (DictMappingPair
                            (Int 1 "1" ())
                            (Var (Ident "x" ()) ()))
                           (:
                            (DictMappingPair
                             (Var (Ident "y" ()) ())
                             (Var (Ident "z" ()) ()))
                            []))
                          ())
                         ())
                        (:
                         (ArgExpr
                          (Dictionary
                           (:
                            (DictMappingPair
                             (Int 2 "2" ())
                             (Var (Ident "z" ()) ()))
                            [])
                           ())
                          ())
                         []))
                       ())
                      (Dictionary
                       (:
                        (DictMappingPair (Int 1 "1" ()) (Var (Ident "x" ()) ()))
                        (:
                         (DictMappingPair
                          (Int 2 "2" ())
                          (Var (Ident "z" ()) ()))
                         (:
                          (DictMappingPair
                           (Var (Ident "y" ()) ())
                           (Var (Ident "z" ()) ()))
                          [])))
                       ())
                      ())
                     [])
                    ())
                   (:
                    (Assert
                     (:
                      (BinaryOp
                       (Equality ())
                       (Call
                        (Var (Ident "dict_merge" ()) ())
                        (:
                         (ArgExpr
                          (Dictionary
                           (:
                            (DictMappingPair
                             (Int 1 "1" ())
                             (Var (Ident "y" ()) ()))
                            (:
                             (DictMappingPair
                              (Int 2 "2" ())
                              (Var (Ident "z" ()) ()))
                             []))
                           ())
                          ())
                         (:
                          (ArgExpr
                           (Dictionary
                            (:
                             (DictMappingPair
                              (Int 1 "1" ())
                              (Var (Ident "x" ()) ()))
                             (:
                              (DictMappingPair
                               (Var (Ident "y" ()) ())
                               (Var (Ident "z" ()) ()))
                              []))
                            ())
                           ())
                          []))
                        ())
                       (Dictionary
                        (:
                         (DictMappingPair
                          (Int 1 "1" ())
                          (Var (Ident "x" ()) ()))
                         (:
                          (DictMappingPair
                           (Int 2 "2" ())
                           (Var (Ident "z" ()) ()))
                          (:
                           (DictMappingPair
                            (Var (Ident "y" ()) ())
                            (Var (Ident "z" ()) ()))
                           [])))
                        ())
                       ())
                      [])
                     ())
                    (:
                     (Assert
                      (:
                       (BinaryOp
                        (Equality ())
                        (Call
                         (Var (Ident "dict_merge" ()) ())
                         (:
                          (ArgExpr
                           (Dictionary
                            (:
                             (DictMappingPair
                              (Int 1 "1" ())
                              (Var (Ident "x" ()) ()))
                             (:
                              (DictMappingPair
                               (Var (Ident "y" ()) ())
                               (Var (Ident "z" ()) ()))
                              []))
                            ())
                           ())
                          (:
                           (ArgExpr
                            (Dictionary
                             (:
                              (DictMappingPair
                               (Int 1 "1" ())
                               (Var (Ident "y" ()) ()))
                              (:
                               (DictMappingPair
                                (Int 2 "2" ())
                                (Var (Ident "z" ()) ()))
                               []))
                             ())
                            ())
                           []))
                         ())
                        (Dictionary
                         (:
                          (DictMappingPair
                           (Int 1 "1" ())
                           (Var (Ident "y" ()) ()))
                          (:
                           (DictMappingPair
                            (Int 2 "2" ())
                            (Var (Ident "z" ()) ()))
                           (:
                            (DictMappingPair
                             (Var (Ident "y" ()) ())
                             (Var (Ident "z" ()) ()))
                            [])))
                         ())
                        ())
                       [])
                      ())
                     []))))))
               ())
              (:
               (Fun
                (Ident "test_cartes" ())
                []
                Nothing
                (:
                 (Assert
                  (:
                   (BinaryOp
                    (Equality ())
                    (Call
                     (Var (Ident "list" ()) ())
                     (:
                      (ArgExpr
                       (Call
                        (Var (Ident "cartes" ()) ())
                        (:
                         (ArgExpr
                          (List (: (Int 1 "1" ()) (: (Int 2 "2" ()) [])) ())
                          ())
                         (:
                          (ArgExpr
                           (List
                            (:
                             (Int 3 "3" ())
                             (: (Int 4 "4" ()) (: (Int 5 "5" ()) [])))
                            ())
                           ())
                          []))
                        ())
                       ())
                      [])
                     ())
                    (List
                     (:
                      (List (: (Int 1 "1" ()) (: (Int 3 "3" ()) [])) ())
                      (:
                       (List (: (Int 1 "1" ()) (: (Int 4 "4" ()) [])) ())
                       (:
                        (List (: (Int 1 "1" ()) (: (Int 5 "5" ()) [])) ())
                        (:
                         (List (: (Int 2 "2" ()) (: (Int 3 "3" ()) [])) ())
                         (:
                          (List (: (Int 2 "2" ()) (: (Int 4 "4" ()) [])) ())
                          (:
                           (List (: (Int 2 "2" ()) (: (Int 5 "5" ()) [])) ())
                           []))))))
                     ())
                    ())
                   [])
                  ())
                 (:
                  (Assert
                   (:
                    (BinaryOp
                     (Equality ())
                     (Call
                      (Var (Ident "list" ()) ())
                      (:
                       (ArgExpr (Call (Var (Ident "cartes" ()) ()) [] ()) ())
                       [])
                      ())
                     (List (: (List [] ()) []) ())
                     ())
                    [])
                   ())
                  []))
                ())
               [])))))))))))))))
